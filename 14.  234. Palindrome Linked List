234. Palindrome Linked List



// APPROACH 1 : TC -> O(N)
// SC -> O(N)


// class Solution {
//     private:
//     bool palidrome(vector<int> v)
//     {
//         int n = v.size();
//         int s = 0;
//         int e = n-1;
//         while(s<=e)
//         {
//             if(v[s] != v[e])
//                 return false;
            
//             s++;
//             e--;
//         }
//         return true;
//     }
// public:
//     bool isPalindrome(ListNode* head) {
//         vector<int> v;
//         ListNode* temp = head;
//         while(temp)
//         {
//             v.push_back(temp->val);
//             temp = temp->next;
//         }
//         return palidrome(v);
        
//     }
// };



// ********************************************************

// APPROACH 2 : TC -> O(N)
// SC -> O(1)


class Solution {
public:
    ListNode* reverseList(ListNode* head)
    {
        if( head == NULL)
            return head;
        
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* farward = NULL;

        while( curr )
        {
            farward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = farward;
        }

        return prev;

    }


    // JUST FOR CHECKING PURPOSE....

    // void print(ListNode* head)
    // {
    //     while(head )
    //     {
    //         cout<<head->val<<" ";
    //         head = head->next;

    //     }
    //     cout<<endl;
    // }
    bool isPalindrome(ListNode* head) {
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while( fast->next != NULL  && fast->next->next != NULL)  // for getting node before middle node 
        {
            fast = fast->next->next;
            slow = slow ->next;
        }

        slow ->next = reverseList(slow->next);
       // print(head);
        ListNode* start = head;
        ListNode* mid = slow->next;
        while( mid!= NULL)
        {
            if(mid->val != start->val) return false;

            start = start->next;
            mid = mid->next;
        }

        slow->next = reverseList(slow->next);
         //print(head);

        return true;


    }
};
