21. Merge Two Sorted Lists


// // APPROACH 1 : Iterative approach ...


// class Solution {
// public:
//     ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
//         ListNode* third = NULL;
//         ListNode* last = NULL;
//         if(list1 == NULL)
//         {
//             return list2;
//         }
//         if(list2 == NULL)
//         {
//             return list1;
//         }
//         if(list1->val < list2->val)
//         {
//             third = last = list1;
//             list1 = list1->next;
//             third->next = NULL;

//         }
//         else
//         {
//             third = last = list2;
//             list2 = list2->next;
//             third->next = NULL;
//         }
//         while(list1 && list2)
//         {
//             if(list1->val < list2->val)
//             {
//                 last->next = list1;
//                 last = list1;
//                 list1 = list1->next;
//                 last->next = NULL;

//             }
//             else{
//                 last->next = list2;
//                 last = list2;
//                 list2 = list2->next;
//                 last->next = NULL;
//             }
//         }
//         if(list1) last ->next = list1;
//         if(list2) last ->next = list2;

        
//         return third;
//     }
// };

// APPROACH 2: Recursive approach...

class Solution {
public:
    ListNode* merge(ListNode* l1, ListNode* l2)
    {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        if(l1->val < l2->val)
        {
            l1->next = merge(l1->next, l2);
            return l1;
        }
        else
        {
            l2->next = merge(l1, l2->next);
            return l2;
        }
    }
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        return merge(list1, list2);
    }
};
