328. Odd Even Linked List


// APPROACH 1: TC->O(N)
 // SC -> O(1)
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;

        ListNode * odd = NULL;      // for storing starting position of odd list
        ListNode * o = NULL;        // for traversing of odd linked list
        ListNode * even = NULL;     // for storing starting position of even list
        ListNode * e = NULL;        // for traversing of even linked list

        ListNode* temp = head;
        int count = 1;
        while(temp)
        {
            if(count %2 == 1 )
            {
                if(odd == NULL)
                {
                    odd = temp ;
                    o = temp;
                }
                else
                {
                    o->next = temp;
                    o = o->next;
                }
            }
            else
            {
                if(even == NULL)
                {
                    even = temp ;
                    e = temp;
                }
                else
                {
                    e->next = temp;
                    e = e->next;
                }
            }

            count++;
            temp = temp->next;
        }

        if(odd == NULL)
            return even;
        if(even == NULL)
            return odd;
        
        o->next = even;
        e->next = NULL;

        return odd;

    }
};
