138. Copy List with Random Pointer


// ********************************************************************

// APPROACH 1 : WITH the unordered_map space used 

// class Solution {
// public:
//     Node* copyRandomList(Node* head) {
//         unordered_map<Node*, Node* > um;
//         Node* temp = head;
//         while(temp)
//         {
//             Node* copy = new Node(temp->val);
//             um[temp] = copy;
//             temp = temp->next;
//         }

//         temp = head;
//         while(temp)
//         {
//             um[temp]->next = um[temp->next];
//             um[temp]->random = um[temp->random];
//             temp = temp->next;
//         }

//         return um[head];
//     }
// };



//*********************************************************************************8

// APPROACH 2 : WIHTOUT the use of unordered_map spaces....


class Solution {
public:
    void copyList(Node* head)
    {
        Node* temp = head, *n = head->next;

        while(temp)
        {
            Node* copy = new Node(temp->val);
            temp->next = copy;
            copy->next = n;
            temp = n;
            if(n) n = n->next;
        }
    }

    void handleRandom(Node* head)
    {
        Node* temp = head;

        while(temp)
        {   
            if(temp->random)
                temp->next->random = temp->random->next;
            temp  = temp->next->next;
        }
    }

    Node* detached(Node* head)
    {
        Node* dummy = new Node(-1);
        Node* tail =dummy, *temp = head;

        while(temp)
        {
            tail->next = temp->next;
            tail = tail->next;
            temp->next= tail->next;
            temp = temp->next;
        }

        return dummy->next;
    }

    Node* copyRandomList(Node* head) {
        if(head == NULL)
            return head;
        
        copyList(head);
        handleRandom(head);
        return detached(head);
    }
};
