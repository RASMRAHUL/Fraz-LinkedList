705. Design HashSet



// // APPRAOCH 1:

// class MyHashSet {
// public:
//     vector<bool > hash_table;

//     MyHashSet() {
//        hash_table = vector<bool>(1000001, false); 
//     }
    
//     void add(int key) {
//         hash_table[key] = true;
        
//     }
    
//     void remove(int key) {
//         hash_table[key] = false;
//     }
    
//     bool contains(int key) {
//         return hash_table[key] == true;
//     }
// };


//*******************************************************************8

//APPRAOCH 2: 

class MyHashSet {
public:
    vector<list<int>> m;
    int siz;
    MyHashSet() {
        siz = 100;
        m.resize(siz);
    }
    int hash(int key)
    {
        return key % siz;
    }

    list<int>:: iterator search(int key)  // return the itererator of the value
    {
        int i = hash(key);
        return find(m[i].begin() , m[i].end(), key);
    }
    void add(int key) {
        if(contains(key))
            return ;
        
        int i = hash(key);
        m[i].push_back(key);
        
    }
    
    void remove(int key) {
        
        if(!contains(key)) 
            return;
        else
        {
            int i = hash(key);
            m[i].erase(search(key) );
        }

    }
    
    bool contains(int key) {
        int i =hash(key);
        if(search(key) != m[i].end())
            return true;
        else
            return false;
    }
};


